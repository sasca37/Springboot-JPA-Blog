* db 설정 
create user 'root'@'%' identified by 'nipa2021-1000';
-- ON DB이름.테이블명
-- TO 유저이름@아이피주소
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%';
CREATE DATABASE blog;
use blog;
<비번변경시>
ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';

10강.

postman 설치  

http 통신 : 약속 
http(1.1버전) 통신방법 

A   ---> 요청 (request)  -->B(서버)
<요청의 방법 4가지> 요청 후에 how(어떤 데이터를 표현)하기 위해 ?를 사용 

1. get : 데이터를 줘 -(DB에 매핑해보면 SELECT) -> URL에 데이터 노출, 캐싱 O, 데이터를 헤더에포함

*캐싱 : 한번 접근 후 또 요청할시 레지스터에 데이터를 저장시켜 빠르게 접근가능하게함 

2. post : 데이터를 추가해줘(INSERT)  -> 데이터노출 X , 캐싱X, 데이터를 바디에 포함

3. put : 데이터를 수정해줘 (UPDATE)

4. delete : 삭제 (DELETE)

11강.

http방식 : stateless
stateless : 요청시 마다 스트림을 연결해서 data를 주고 받는 방식

채팅방식 : stateful (연결이 지속돼있음)

12강. MIME 타입 

헤더와 바디

클 --->post 요청 --> 서버

post 요청 (JSON, TEXT, IMG, AVI, 이진 등)

MIME 타입 : 웹에서는 문서의 다양성을 알려주기위한 메커니즘(확장자는 별 도움이 안됨) 
MIME 문법 : type/subtype 
ex) text/plain text/html image/jpeg  text/css application/json application/js  

헤더 :  img/jpeg (데이터를 설명)
바디 :  my.jpeg  (데이터)

패킷스위칭 : 패킷 단위로 
서킷스위칭 : 있는 전부 단위로 

13강 . http 요청 
@RestController : 사용자가 요청했을때 data를 응답하는 컨트롤러 
@Controller : 사용자가 요청했을때 html을 응답하는 컨트롤러 (view 반환)

인터넷 브라우저 요청은 무조건 get 요청밖에 할 수가 없다.
다른 메소드 실행시 405(메서드 틀린에러)에러뜸 

@GetMapping("/http/get")
	public String getTest() {
		return "get 요청";
	}

public String getTest(@RequestParam int id, @RequestParam String username) 
== public String getTest(Member m)

post는 get과 달리 url이 아닌 바디에 값을 넣는다 . 이 때 body값 설정을 위한 @RequestBody 사용
<form> 태그 와 같은 속성을 x-www-form 이라함


MIME의 타입은 MessageConverter (스프링부트) 가 자동으로 해준다. 

14강. 
Maven 장점 : 여러 라이브러리들을 .m2 폴더안에 repository 내부에 담아두는 중앙저장소 
pom.xml에 필요한 라이브러리들 기술해두면 자동으로 다운받아줌 
-> pom.xml 배포만으로도 다른 os환경에서도 접근용이 (maven 설치만하면됨) 

15~16 : lombok 사용 및 설치 
builder 는 매개변수 순서가 달라고 제대로 들어간다. 빼고싶은 매개변수를 마음대로 뺄 수 있다.

17 : yaml 설정 : 프로젝트 설정 (인코딩, 디비 등) - 기존엔 xml에서 설정 요즘 yaml
xml -> json -> yaml

yaml 키와 벨류 사이에 스페이스가 무조건 띄워져야한다. 
중괄호가 없는 대신 들여쓰기로 한다. (무조건 스페이스 2칸)

레거시 기준
root-context.xml : 한번만 new되고 더이상 안하는애들 (싱글톤) db 설정
servlet-context.xml : 지속적으로 계속 사용해야되는 애들 

-> 이것들을 통합한 application.yml에 모든 설정을하면된다. (스프링부트)

server:
  port: 8080
  servlet:
    context-path: /

--> 기본 디폴트 설정 


파일리턴 기본경로 : src/main/resources/static 
파일 풀네임 .html 등 해야 된다 . 
static 안에는 정적파일만가능 html. img 등 

jsp 는 기본적으로 스프링부트에서 지원을하지 않고 (pom 에 jsper 필요) 동적파일이다.
src - main 에 webapp/WEB-INF/views 폴더 생성 후 jsp넣는다.

yaml 에
spring:
  mvc:
    view:
      prefix: /WEB-INF/views/ --> 앞에 붙는
      suffix: .jsp		--> 뒤에 붙는 

18강 User 테이블
JPA: 자바의 클래스와 DB의 테이블을 매핑하는 기술 
@Entity //User 클래스가 MYSQL에 자동으로 테이블이 생성이 된다. JPA 사용을 알림 
@Id //Primary Key
@GeneratedValue(strategy = GenerationType.IDENTITY) //프로젝트에서 연결된 db의 넘버링 전략을 따라간다. +JPA 설정 필요 
IDENTITY 말고도 여러가지있다. 

jpa:
    open-in-view: true
    hibernate:
      ddl-auto: create --> 테이블 생성을 위함 (실행마다 하므로 처음에만 create로하고 후에 update로 수정) 
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      use-new-id-generator-mappings: false --> JPA가 사용하는 기본 넘버링 전략을 따라가지 않는다.
    show-sql: true --> 콘솔창에 쿼리문 보여줌 
    properties:
      hibernate.format_sql: true --> 줄단위로 띄워서 보여줌 

@Column(nullable = false, length =30) 
널이 될수없고 길이 조절 
@CreationTimestamp //시간 자동입력
@ColumnDefault("'user'") //문자임을 알리기위한 " '   ' "

22강 : 연관관계 주인 = FK를 가진 오브젝트 
<<<<<<< HEAD
상세보기 화면 : user board reply 가 다필요한 상황
select * from board where id =1 ; 쿼리문 실행시 

JPA에서 보드 모델이 필요한 것을 인식을하고 똑같은 쿼리문을 만드는 것이 아닌 
보드가 들고있는 user 오브젝트 (FK)를 보고 조인 쿼리문을 날린다. USER랑 BOARD를 조인한 쿼리문 
=======

24강 : 더미데이터 insert
>>>>>>> branch 'master' of https://github.com/sasca37/Springboot-JPA-Blog.git

26강 selectbyid  
28강 업데이트 
	//save 함수는 id를 전달하지 않으면 insert를 해주고 
	//id를 전달하면 해당 id에 대한 데이터가 있으면 update를 해주고 
	// 데이터가 없으면 insert를 한다.
*더티 체킹 
@Transactional  //save를 호출하지 않아도 db값 업데이트가능

29강 JPA 영속성 컨텍스트,  더티체킹

1차 캐시 : user 객체가 쌓임 (영속화: 영원히 지속 -> 플러쉬를 해도 1차캐시에 객체가 남아있음 )  
이게 db에 넘어갈시 flush 
즉 db에 영향없이 컨트롤러에서 user객체의 값을 바꿀 수있음 
영속화된 user 객체를 Controller에서 값을 수정하면 JPA에선 user객체를 update함 

@Transactional 시 해당 메소드 종료시에 자동 커밋이된다. -> jpa에서 객체 내용 변경시 변경내용을 스스로 확인 ->
-> 변경된 내용이 확인되었으니 자동으로 flush를 함 == save호출 없이 db update가 가능하다. 
* @Transcational 사용해도 변경된 값이 없으면 flush를 하지않음 --> 이러한 확인 방식이 더티체킹(변경감지)
db에서의 더티체킹 : 트랜잭션해야될것을 모아놨다가 한방에 커밋하는것 살짝의미가 다름 

30강 delete

31강 exception 처리 

32강 스프링 컨트롤러 파싱 , json통신 

1.GET : 모든 URL에 검색되는 방식 .  body로 데이터를 담아 보내지 않음 key value 형태 
2. post put delete (데이터를 변경) : 데이터를 담아 보내야 할 것이 많음 
-> form 태그 (html) 요청은 get, post 밖에 못함, 데이터가 key value 형태 
-> 자바스크립트 요청은 다가능 

통일 : 자바스크립트로 ajax 요청 + 데이터는 json으로 통일 
스프링 안에<form:form> 태그 있음. 이것도 모두가능 

스프링 컨트롤러 전략
key value 형태의 데이터를 받으면 컨트롤러는 파라미터 변수에 대입해준다.
		   		        오브젝트로 파싱해서 받아주는 역할도 한다. (단 해당 오브젝트가 setter필요)

3. 오브젝트로 데이터 받기 (setter 무조건있어야된다)
post 방식의 key value (x-www-form-urlencoded)
username = ss      --> 변수의 값이 동일해야한다.
password = 1234
없는 값을 넣어도 오류는 나지않고 객체에 포함된 다른값은 null로 들어간다

키밸류가 아닐경우 @ResquestBody 어노테이션을 붙이면 자바오브젝트로 파싱해준다. 

36강 회원가입시 ajax를 사용하는 2가지 이유 

1. 요청에 대한 응답을 html이 아닌 데이터(json)를 받기 위해서  
클라이언트가 브라우저일 떄 -> 회원가입요청에 대한 응답을 data로 보내고 다시 메인페이지요청시에 html 보내줌
                 앱 등 일때 -> data응답으로 끝 (앱에선 화면을 갖고있기때문)

2. 비동기 통신을 하기 위해서 (송수신간 동기를 맞추지 않고 문자단위로 구분하여 전송하는 방식) -불규칙적인 전송에 적합 
-> 절차적이긴하나 순서에 상관없이 작동 ( cpu 처리작업중 중간에 저장장치시 이걸 비동기처리하고 cpu이어서작업)

39강 

서비스
1. 트랜잭션 관리  
2. 서비스의 의미 : 여러개의 트랜잭션을 하나의 트랜잭션으로 묶어서 서비스화 함 
중간에 문제가 생길 수도 있기 때문에 오류 없는 걸 확인 후 COMMIT을 해야되기 때문에 서비스가 존재 

41강  db격리수준
트랜잭션 : 일이 처리되기 위한 가장 작은 단위 
